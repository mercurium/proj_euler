import time, math
START = time.time()
SIZE = 10**9

LENGTH = int(math.log(SIZE,7))+1

pows = [ (SIZE/7**i)%7 for i in range(LENGTH) ][::-1]

sumz,mult = 0,1
for i in xrange(LENGTH):
	sumz += pows[i] * (pows[i] +1) * mult / 2 * 28**( (LENGTH-1) - i)
	mult *= (pows[i] +1)
	
print "The answer is:", sumz
print "Time elapsed:", time.time() - START

"""
10^9 base 10 = 33,531,600,616 base 7

Congratulations, the answer you gave to problem 148 is correct.

You are the 2561st person to have solved this problem.

23:30 ~/Desktop/python_projects/proj_euler $ python prob148.py 
[296196766695424, 10578455953408, 377801998336, 13492928512, 481890304, 17210368, 614656, 21952, 784, 28, 1]
[3, 3, 5, 3, 1, 6, 0, 0, 6, 1, 6]
The answer is: 2129970655314432
Time elapsed: 9.48905944824e-05

Haha... okay, this problem took me much longer than it should have, but I did have quite a bit of fun drawing out the triangles ( see viz148.py for the drawing code). So the interesting thing to note is, pascal's triangle forms blocks of height 7 which are not divisible by 7. These triangles then form more triangles of height 49, which in turn form triangles of height 343... and etc. Each of the small triangles has 28 numbers, and each triangle containing 7 rows of small triangles has 28 of those. Thus, we can say that a triangle of size k has 28^k numbers in it.

However, what we need to deal with is the stuff that isn't part of a triangle. If there's two rows (err... 3 total) big triangles of size5 and some leftover, this is the start of 3 triangles of size5. This means that we should take the number of triangles generated by the rest of the division and multiply it by 3 to account for the fact that there's going to be three of them. Once we do this, we get the answer pretty quickly, with my code taking less than .0001 seconds to run. =)....

Anyways uhh... sorry, this problem is hard to define =.=;;

"""

